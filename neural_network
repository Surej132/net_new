import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# Define a simple neural network architecture
def create_neural_network(input_dim):
    model = Sequential([
        Dense(64, input_dim=input_dim, activation='relu'),  # Input layer with 64 neurons
        Dropout(0.5),  # Dropout for regularization
        Dense(32, activation='relu'),  # Hidden layer with 32 neurons
        Dropout(0.5),  # Dropout for regularization
        Dense(1, activation='sigmoid')  # Output layer for binary classification
    ])
    
    # Compile the model
    model.compile(optimizer='adam', 
                  loss='binary_crossentropy', 
                  metrics=['accuracy'])
    return model

# Example usage with dummy data
if __name__ == "__main__":
    import numpy as np

    # Generate dummy data
    X_dummy = np.random.rand(1000, 20)  # 1000 samples, 20 features
    y_dummy = np.random.randint(0, 2, 1000)  # Binary target labels

    # Create the model
    model = create_neural_network(input_dim=X_dummy.shape[1])

    # Train the model
    model.fit(X_dummy, y_dummy, epochs=10, batch_size=32, validation_split=0.2)