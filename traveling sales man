import itertools

def calculate_distance(path, distances):
    return sum(distances[path[i]][path[i + 1]] for i in range(len(path) - 1)) + distances[path[-1]][path[0]]

def traveling_salesman(distances):
    cities = list(distances.keys())
    shortest_path = None
    min_distance = float('inf')

    for perm in itertools.permutations(cities):
        current_distance = calculate_distance(perm, distances)
        if current_distance < min_distance:
            min_distance = current_distance
            shortest_path = perm

    return shortest_path, min_distance

# Example usage
if __name__ == "__main__":
    distances = {
        'A': {'A': 0, 'B': 10, 'C': 15, 'D': 20},
        'B': {'A': 10, 'B': 0, 'C': 35, 'D': 25},
        'C': {'A': 15, 'B': 35, 'C': 0, 'D': 30},
        'D': {'A': 20, 'B': 25, 'C': 30, 'D': 0}
    }

    path, distance = traveling_salesman(distances)
    print(f"Shortest path: {path}")
    print(f"Minimum distance: {distance}")